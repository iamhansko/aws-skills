AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation Template"

# Parameters:
#   KeyPair: 
#     Description: EC2 Key Pair
#     Type: AWS::EC2::KeyPair::KeyName

Mappings:
  RegionMap:
    us-east-1:
      AmazonLinux2023: ami-0b72821e2f351e396
      EcsOptimizedAmazonLinux2023: ami-025a8beccff4de554
    ap-northeast-2:
      AmazonLinux2023: ami-04ea5b2d3c8ceccf8
      EcsOptimizedAmazonLinux2023: ami-0856df28f23817b2f
  ResourceMap:
    Vpc:
      Name : skills-vpc
      CidrBlock: 10.10.0.0/16
    PublicSubnet:
      Name: skills-pub
    PrivateSubnet:
      Name: skills-priv
    InternetGateway:
      Name: skills-igw
    NatGateway:
      Name: skills-natgw
    BastionEc2:
      Name: skills-bastion2
      InstanceType: t3.small
    CodePipeline:
      Name: skills-pipeline
      Source: skills-commit
      Build: skills-build
      DeployApplication: skills-app
      DeploymentGroup: skills-dg

Resources:
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub
        - "key-${Id}"
        - Id: !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
  
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsHostnames: True
      CidrBlock: !FindInMap [ResourceMap, Vpc, CidrBlock]
      Tags: 
        - Key : Name
          Value : !FindInMap [ResourceMap, Vpc, Name]
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Select [0, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "a"]]
      VpcId: !Ref Vpc
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: !Select [1, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "b"]]
      VpcId: !Ref Vpc
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}c"
      CidrBlock: !Select [2, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "c"]]
      VpcId: !Ref Vpc
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Select [10, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "a"]]
      VpcId: !Ref Vpc
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: !Select [11, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "b"]]
      VpcId: !Ref Vpc
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}c"
      CidrBlock: !Select [12, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "c"]]
      VpcId: !Ref Vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !FindInMap [ResourceMap, InternetGateway, Name]
  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  NatGatewayAElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, NatGateway, Name], "a"]]
  NatGatewayBElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, NatGateway, Name], "b"]]
  NatGatewayCElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayC:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayCElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetC
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, NatGateway, Name], "c"]]
      
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "rt"]]
      VpcId: !Ref Vpc
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetB
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetC
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable
  
  PrivateSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "a", "rt"]]
      VpcId: !Ref Vpc
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetARouteTable
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnetARoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
      RouteTableId: !Ref PrivateSubnetARouteTable
  PrivateSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "b", "rt"]]
      VpcId: !Ref Vpc
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetBRouteTable
      SubnetId: !Ref PrivateSubnetB
  PrivateSubnetBRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
      RouteTableId: !Ref PrivateSubnetBRouteTable
  PrivateSubnetCRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "c", "rt"]]
      VpcId: !Ref Vpc
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetCRouteTable
      SubnetId: !Ref PrivateSubnetC
  PrivateSubnetCRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayC
      RouteTableId: !Ref PrivateSubnetCRouteTable
  
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: skills-alb
      Scheme: internal
      SecurityGroups: 
        - !Ref ApplicationLoadBalancerSecurityGroup
      Subnets:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
        - !Ref PrivateSubnetC
      Type: application
  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Application Load Balancer"
      GroupName: alb-sg
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref Vpc
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: 
        - TargetGroupArn: !Ref TargetGroup1
          Type: forward
      LoadBalancerArn: !GetAtt ApplicationLoadBalancer.LoadBalancerArn
      Port: 80
      Protocol: HTTP
  ListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroup1
                Weight: 1
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: User-Agent
            Values:
              - Mozilla
      ListenerArn: !Ref Listener
      Priority: 1
  TargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      IpAddressType: ipv4
      Name: skills-tg1
      Port: 80
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 4
      VpcId: !Ref Vpc
  TargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      IpAddressType: ipv4
      Name: skills-tg2
      Port: 80
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 4
      VpcId: !Ref Vpc

  Route53HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: skills.local
      VPCs: 
        - VPCId: !Ref Vpc
          VPCRegion: !Ref AWS::Region
  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref Route53HostedZone
      Name: app.skills.local
      Region: !Ref AWS::Region
      ResourceRecords: 
        - !GetAtt ApplicationLoadBalancer.DNSName
      SetIdentifier: id_001
      TTL: 300
      Type: CNAME
  
  Ecr:
    Type: AWS::ECR::Repository
    Properties:
      EmptyOnDelete: True
      RepositoryName: skills-ecr

  BastionEc2:
    Type: AWS::EC2::Instance
    DependsOn: 
      - CodeCommitSourceS3Bucket
      - Ecr
    CreationPolicy:
      ResourceSignal:
        Count: '1'                
        Timeout: PT15M
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref AWS::Region, AmazonLinux2023]
      InstanceType: !FindInMap [ResourceMap, BastionEc2, InstanceType]
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnetA
          GroupSet: 
            - !Ref BastionEc2SecurityGroup
      Tags: 
        - Key: Name
          Value: !FindInMap [ResourceMap, BastionEc2, Name]
      IamInstanceProfile: !Ref BastionEc2InstanceProfile
      UserData: 
        Fn::Base64: 
          !Sub |
            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            dnf update -y
            dnf install docker -y
            systemctl start docker
            systemctl enable docker
            usermod -aG docker ec2-user
            newgrp docker
            echo 'package main

            import (
                "fmt"
                "net/http"
            )

            func health(w http.ResponseWriter, req *http.Request) {
                fmt.Fprint(w, "OK")
            }

            func dummy(w http.ResponseWriter, req *http.Request) {
                fmt.Fprint(w, "BLUE")
            }

            func main() {
                http.HandleFunc("/health", health)
                http.HandleFunc("/v1/dummy", dummy)
                http.ListenAndServe(":80", nil)
            }' > main.go
            echo 'FROM golang:1.16
            WORKDIR /app
            COPY main.go .
            RUN go build main.go
            EXPOSE 80
            CMD ["./main"]' > Dockerfile
            zip src.zip main.go
            aws s3 cp src.zip s3://${CodeCommitSourceS3Bucket}
            aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
            IMAGE_TAG=${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Ecr}:prototype
            docker build -t $IMAGE_TAG .
            docker push $IMAGE_TAG
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionEc2 --region ${AWS::Region}
  BastionEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Bastion EC2 SSH Connection"
      GroupName: bastion-sg
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId: !Ref Vpc
  BastionEc2IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      RoleName: Ec2AdminRole
  BastionEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: Ec2AdminProfile
      Roles: 
        - !Ref BastionEc2IamRole
  BastionEc2ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref BastionEc2

  CodeCommitSourceS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: RetainExceptOnCreate
  CodeCommit:
    Type: AWS::CodeCommit::Repository
    DependsOn: BastionEc2
    Properties:
      Code: 
        BranchName: upstream
        S3: 
          Bucket: !Ref CodeCommitSourceS3Bucket
          Key: src.zip
      RepositoryName: skills-commit
  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts: 
        Type: CODEPIPELINE
      Environment: 
        ComputeType: BUILD_GENERAL1_MEDIUM
        Type: LINUX_CONTAINER
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
      Name: skills-build
      ServiceRole: !Ref CodeBuildIamRole
      Source: 
        BuildSpec: !Sub |
          version: 0.2
          env:
            variables:
              AWS_DEFAULT_REGION: ${AWS::Region}
              AWS_ACCOUNT_ID: ${AWS::AccountId}
              IMAGE_REPO_NAME: ${Ecr}
              CAPACITY_PROVIDER: ${EcsCapacityProvider}
          phases:
            pre_build:
              commands:
                - ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime
                - | 
                  echo 'FROM golang:1.16
                  WORKDIR /app
                  COPY . .
                  RUN go build main.go
                  EXPOSE 80
                  CMD ["./main"]' > Dockerfile
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
            build:
              commands:
                - IMAGE_VERSION=$(LC_TIME=ko_KR.UTF-8 date +'%Y-%m-%d.%H.%M.%S')
                - IMAGE_TAG=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_VERSION
                - docker build -t $IMAGE_TAG .
                - docker push $IMAGE_TAG
            post_build:
              commands:
                - IMAGE_VERSION=$(echo $(aws ecr describe-images --repository-name $IMAGE_REPO_NAME --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]') | tr -d '"')
                - FAMILY="skills-td"
                - EXECUTION_ROLE_ARN="arn:aws:iam::$AWS_ACCOUNT_ID:role/${EcsTaskExecutionRole}"
                - CONTAINER_NAME="skills-container"
                - CONTAINER_PORT="80"
                - CONTAINER_IMAGE="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_VERSION"
                - |
                  jq -n --arg FAMILY $FAMILY --arg EXECUTION_ROLE_ARN $EXECUTION_ROLE_ARN --arg CONTAINER_NAME $CONTAINER_NAME --arg CONTAINER_IMAGE $CONTAINER_IMAGE --arg AWS_DEFAULT_REGION $AWS_DEFAULT_REGION \
                    '{ "family":$FAMILY, "executionRoleArn":$EXECUTION_ROLE_ARN, "networkMode":"awsvpc", "cpu":"256", "memory":"512", "containerDefinitions":[{"healthCheck":{"command":["CMD-SHELL","curl -f http://localhost/health || exit 1"],"interval":10,"timeout":5,"retries":3,"startPeriod": 0},"logConfiguration":{"logDriver":"awslogs","options":{"awslogs-group":"/ecs/skills-td","awslogs-region":$AWS_DEFAULT_REGION,"awslogs-stream-prefix":"ecs"}},"name":$CONTAINER_NAME,"image":$CONTAINER_IMAGE,"portMappings":[{"containerPort":80,"hostPort":80,"protocol":"tcp"}]}] }' \
                    > task-definition.json
                - TASK_DEFINITION_JSON=$(aws ecs register-task-definition --cli-input-json file://task-definition.json)
                - TASK_DEFINITION_ARN=$(echo $TASK_DEFINITION_JSON | jq -r '.taskDefinition .taskDefinitionArn')
                - >
                  jq -n --arg TASK_DEFINITION_ARN $TASK_DEFINITION_ARN --arg CONTAINER_NAME $CONTAINER_NAME --arg CONTAINER_PORT $CONTAINER_PORT --arg CAPACITY_PROVIDER $CAPACITY_PROVIDER \
                  '{"version": 0.0, "Resources": [{"TargetService": {"Type": "AWS::ECS::Service", "Properties": {"TaskDefinition": $TASK_DEFINITION_ARN, "LoadBalancerInfo": {"ContainerName": $CONTAINER_NAME, "ContainerPort": $CONTAINER_PORT}, "CapacityProviderStrategy": [{"Base":0,"CapacityProvider":$CAPACITY_PROVIDER,"Weight":1}]}}}]}' \
                  > appspec.json
          artifacts:
            files:
              - appspec.json
            discard-paths: yes
        Type: CODEPIPELINE
      TimeoutInMinutes: 15
  CodeBuildIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - ecr:GetLifecyclePolicy
                  - ecr:GetLifecyclePolicyPreview
                  - ecr:ListTagsForResource
                  - ecr:DescribeImageScanFindings
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                  - ecs:*
                  - iam:PassRole
                Resource: '*'
      RoleName: CodeBuildRole

  EcsAutoScalingGroupIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      RoleName: EcsAutoScalingGroupIamRole
  EcsAutoScalingGroupProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: EcsAutoScalingGroupProfile
      Roles: 
        - !Ref EcsAutoScalingGroupIamRole
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: skills-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: disabled
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
  EcsLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: EcsCluster
    Properties:
      LaunchTemplateData:
        ImageId: !FindInMap [RegionMap, !Ref AWS::Region, EcsOptimizedAmazonLinux2023]
        TagSpecifications:
          - ResourceType: instance
            Tags: 
              - Key: Name
                Value: ecs-asg-instance
        NetworkInterfaces:
          - DeviceIndex: 0
            DeleteOnTermination: true
            Groups: 
              - !Ref EcsAutoScalingGroupSecurityGroup
        KeyName: !Ref KeyPair
        IamInstanceProfile: 
          Arn: !GetAtt EcsAutoScalingGroupProfile.Arn
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash -xe
              exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
              # dnf update -y
              # dnf install docker -y
              # systemctl start docker
              # systemctl enable docker
              # usermod -aG docker ec2-user
              # newgrp docker
              # curl -O https://s3.${AWS::Region}.amazonaws.com/amazon-ecs-agent-${AWS::Region}/amazon-ecs-init-latest.x86_64.rpm
              # yum localinstall -y amazon-ecs-init-latest.x86_64.rpm
              # sed -i "s/After=docker.service/After=cloud-final.service/g" /lib/systemd/system/ecs.service
              mkdir -p /etc/ecs
              echo "ECS_CLUSTER=skills-cluster" > /etc/ecs/ecs.config
              # systemctl enable --now --no-block ecs.service
  EcsAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: EcsCluster
    Properties:
      MinSize: 1
      MaxSize: 6
      DesiredCapacity: 3
      Cooldown: 0
      MixedInstancesPolicy:
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref EcsLaunchTemplate
            Version: !GetAtt EcsLaunchTemplate.LatestVersionNumber
          Overrides:
            - InstanceType: t3.micro
        InstancesDistribution:
          OnDemandBaseCapacity: 0
          OnDemandPercentageAboveBaseCapacity: 0
          SpotAllocationStrategy: price-capacity-optimized
      VPCZoneIdentifier:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
        - !Ref PrivateSubnetC
  EcsAutoScalingGroupSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ASG
      GroupName: asg-sg
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - FromPort: 22
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref BastionEc2SecurityGroup
          ToPort: 22
  EcsCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref EcsAutoScalingGroup
        ManagedScaling:
          InstanceWarmupPeriod: 60
          Status: ENABLED
          TargetCapacity: 100
        ManagedTerminationProtection: DISABLED
  ClusterCPAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    DependsOn: EcsCluster
    Properties:
      Cluster: !Ref EcsCluster
      CapacityProviders:
        - !Ref EcsCapacityProvider
      DefaultCapacityProviderStrategy:
        - Base: 0
          Weight: 1
          CapacityProvider: !Ref EcsCapacityProvider
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: BastionEc2
    Properties:
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: golang-app
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Ecr}:prototype
          Essential: true
          PortMappings:
            - HostPort: 80
              Protocol: tcp
              ContainerPort: 80
          HealthCheck:
            Command: 
              - "CMD-SHELL"
              - "curl -f http://localhost/health || exit 1"
      NetworkMode: awsvpc
      Cpu: '256'
      Memory: '512'
      Family: skills-td
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ECS
      GroupName: skills-ecs-sg
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - FromPort: 80
          ToPort: 80
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref ApplicationLoadBalancerSecurityGroup
        - FromPort: 443
          ToPort: 443
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref ApplicationLoadBalancerSecurityGroup
  EcsTaskCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/skills-td
  EcsService:
    Type: AWS::ECS::Service
    DependsOn: 
      - Listener
      - EcsTaskCloudWatchLogGroup
    Properties:
      Cluster: skills-cluster
      TaskDefinition: !Ref EcsTaskDefinition
      ServiceName: skills-svc
      SchedulingStrategy: REPLICA
      DesiredCount: 3
      LoadBalancers:
        - ContainerName: golang-app
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup1
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
            - !Ref PrivateSubnetC
      DeploymentController:
        Type: CODE_DEPLOY
      ServiceConnectConfiguration:
        Enabled: false
      PlacementStrategies:
        - Field: attribute:ecs.availability-zone
          Type: spread
        - Field: instanceId
          Type: spread
      EnableECSManagedTags: true
      CapacityProviderStrategy:
        - CapacityProvider: !Ref EcsCapacityProvider
          Base: 0
          Weight: 1
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: skills-app
      ComputePlatform: ECS
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn:
      - EcsService
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      AutoRollbackConfiguration: 
        Enabled: True
        Events: 
          - DEPLOYMENT_FAILURE
          - DEPLOYMENT_STOP_ON_ALARM
          - DEPLOYMENT_STOP_ON_REQUEST
      DeploymentGroupName: skills-dg
      ServiceRoleArn: !GetAtt CodeDeployIamRole.Arn
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      DeploymentStyle:
        DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentType: BLUE_GREEN
      ECSServices:
        - ClusterName: !Ref EcsCluster
          ServiceName: !GetAtt EcsService.Name
      LoadBalancerInfo: 
        TargetGroupPairInfoList:
          - ProdTrafficRoute:
              ListenerArns:
                - !GetAtt Listener.ListenerArn
            TargetGroups:
              - Name: !GetAtt TargetGroup1.TargetGroupName
              - Name: !GetAtt TargetGroup2.TargetGroupName
      BlueGreenDeploymentConfiguration:
        DeploymentReadyOption: 
          ActionOnTimeout: CONTINUE_DEPLOYMENT
        TerminateBlueInstancesOnDeploymentSuccess: 
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 0
  CodeDeployIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CodeDeployPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:CreateTaskSet
                  - ecs:UpdateServicePrimaryTaskSet
                  - ecs:DeleteTaskSet
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeListeners
                  - elasticloadbalancing:ModifyListener
                  - elasticloadbalancing:DescribeRules
                  - elasticloadbalancing:ModifyRule
                  - lambda:InvokeFunction
                  - cloudwatch:DescribeAlarms
                  - sns:Publish
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: '*'
                Condition:
                  StringLike:
                    "iam:PassedToService" : "ecs-tasks.amazonaws.com"
      RoleName: CodeDeployRole
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: skills-pipeline
      PipelineType: V2
      ArtifactStore:
        Location: !Ref CodePipelineArtifactStoreS3Bucket
        Type: S3
      RoleArn: !GetAtt CodePipelineIamRole.Arn
      Stages: 
        - Name: SourceStage
          Actions: 
            - Name: SourceAction
              ActionTypeId: 
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                RepositoryName: !GetAtt CodeCommit.Name
                BranchName: upstream
                PollForSourceChanges: False
              OutputArtifacts:
                - Name: SourceOutput
        - Name: BuildStage
          Actions: 
            - Name: BuildAction
              ActionTypeId: 
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuild
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
        - Name: DeployStage
          Actions: 
            - Name: DeployAction
              ActionTypeId: 
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: 1
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
              InputArtifacts:
                - Name: BuildOutput
  CodePipelineArtifactStoreS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: RetainExceptOnCreate
  CodePipelineIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:StartPipelineExecution
                Resource:
                  - !Sub 
                      - "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"
                      - CodePipeline: !FindInMap [ResourceMap, CodePipeline, Name]
              - Effect: Allow
                Action:
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:UploadArchive
                  - codecommit:GetUploadArchiveStatus
                Resource:
                  - !GetAtt CodeCommit.Arn
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource:
                  - !GetAtt CodeBuild.Arn
              - Effect: Allow
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetDeployment
                Resource:
                  - !Sub 
                      - "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${CodeDeployApplication}/${CodeDeployDeploymentGroup}"
                      - CodeDeployApplication: !FindInMap [ResourceMap, CodePipeline, DeployApplication]
                        CodeDeployDeploymentGroup: !FindInMap [ResourceMap, CodePipeline, DeploymentGroup]
              - Effect: Allow
                Action:
                  - codedeploy:GetDeploymentConfig
                Resource:
                  - !Sub "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:CodeDeployDefault.ECSAllAtOnce"
              - Effect: Allow
                Action:
                  - codedeploy:RegisterApplicationRevision
                  - codedeploy:GetApplicationRevision
                Resource:
                  - !Sub 
                      - "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:application:${CodeDeployApplication}"
                      - CodeDeployApplication: !FindInMap [ResourceMap, CodePipeline, DeployApplication]
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: "*"
      RoleName: CodePipelineRole
  CloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: >-
        AWS CodeCommit 소스 리포지토리와 브랜치에서 변경이 발생하면 파이프라인을 자동으로 시작하는 Amazon
        CloudWatch Events 규칙입니다. 이 규칙을 삭제하면 해당 파이프라인에서 변경 사항이 감지되지 않습니다. 자세한 정보:
        http://docs.aws.amazon.com/codepipeline/latest/userguide/pipelines-about-starting.html
      EventBusName: default
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Sub 
              - "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommit}"
              - CodeCommit: !FindInMap [ResourceMap, CodePipeline, Source]
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - upstream
      Name: codepipeline-event-rule
      State: ENABLED
      Targets:
        - Id: codepipeline-codepipeline
          Arn: !Sub 
            - "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"
            - CodePipeline: !FindInMap [ResourceMap, CodePipeline, Name]
          RoleArn: !GetAtt CloudWatchEventRuleIamRole.Arn
  CloudWatchEventRuleIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudWatchEventRulePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:StartPipelineExecution
                Resource:
                  - !Sub 
                      - "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"
                      - CodePipeline: !FindInMap [ResourceMap, CodePipeline, Name]
      RoleName: CloudWatchEventRuleRole
