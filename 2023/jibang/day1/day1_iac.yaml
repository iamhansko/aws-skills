AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation Template"

# Parameters:
#   KeyPair: 
#     Description: EC2 Key Pair
#     Type: AWS::EC2::KeyPair::KeyName

Mappings:
  RegionMap:
    us-east-1:
      AmazonLinux2023: ami-0b72821e2f351e396
    ap-northeast-2:
      AmazonLinux2023: ami-04ea5b2d3c8ceccf8
  ResourceMap:
    Vpc:
      Name : wsi-vpc
      CidrBlock: 10.0.0.0/16
    PublicSubnet:
      Name: wsi-public
    PrivateSubnet:
      Name: wsi-private
    InternetGateway:
      Name: wsi-igw
    NatGateway:
      Name: wsi-nat
    BastionEc2:
      Name: wsi-bastion
      InstanceType: t3.small
    # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
    CloudFrontManagedCachePolicy:
      CachingOptimized: 658327ea-f89d-4fab-a63d-7e88639e58f6
      CachingDisabled: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad

Resources:
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub 
        - "key-${Id}"
        - Id: !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
  
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsHostnames: True
      CidrBlock: !FindInMap [ResourceMap, Vpc, CidrBlock]
      Tags: 
        - Key : Name
          Value : !FindInMap [ResourceMap, Vpc, Name]
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Select [1, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "a"]]
      VpcId: !Ref Vpc
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: !Select [2, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "b"]]
      VpcId: !Ref Vpc
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Select [3, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "a"]]
      VpcId: !Ref Vpc
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: !Select [4, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "b"]]
      VpcId: !Ref Vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !FindInMap [ResourceMap, InternetGateway, Name]
  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "rtb"]]
      VpcId: !Ref Vpc
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetB
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable
  
  NatGatewayAElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, NatGateway, Name], "a"]]
  NatGatewayBElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, NatGateway, Name], "b"]]
  PrivateSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "rtb", "a"]]
      VpcId: !Ref Vpc
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetARouteTable
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnetARoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
      RouteTableId: !Ref PrivateSubnetARouteTable
  PrivateSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "rtb", "b"]]
      VpcId: !Ref Vpc
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetBRouteTable
      SubnetId: !Ref PrivateSubnetB
  PrivateSubnetBRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
      RouteTableId: !Ref PrivateSubnetBRouteTable
  
  AboutAppEcr:
    Type: AWS::ECR::Repository
    Properties:
      EmptyOnDelete: True
      RepositoryName: wsi-about
      ImageScanningConfiguration:
        ScanOnPush: true
  ProjectsAppEcr:
    Type: AWS::ECR::Repository
    Properties:
      EmptyOnDelete: True
      RepositoryName: wsi-projects
      ImageScanningConfiguration:
        ScanOnPush: true

  BastionEc2:
    Type: AWS::EC2::Instance
    DependsOn: 
      - AboutAppEcr
      - ProjectsAppEcr
    CreationPolicy:
      ResourceSignal:
        Count: '1'                
        Timeout: PT5M
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref AWS::Region, AmazonLinux2023]
      InstanceType: !FindInMap [ResourceMap, BastionEc2, InstanceType]
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnetA
          GroupSet: 
            - !Ref BastionEc2SecurityGroup
      Tags: 
        - Key: Name
          Value: !FindInMap [ResourceMap, BastionEc2, Name]
      IamInstanceProfile: !Ref BastionEc2InstanceProfile
      UserData:
        # sudo tail -f /var/log/cloud-init-output.log 
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            dnf update -y
            dnf install docker -y
            systemctl start docker
            systemctl enable docker
            usermod -aG docker ec2-user
            newgrp docker
            aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
            
            mkdir -p /home/ec2-user/about
            echo 'from flask import Flask
            app = Flask(__name__)
            @app.route("/about")
            def hello_world():
              return "The about page"' > /home/ec2-user/about/app.py
            echo 'FROM python:3.8-alpine
            COPY . /app
            RUN pip3 install flask 
            WORKDIR /app
            CMD ["python3", "-m", "flask", "run", "--host=0.0.0.0"]' > /home/ec2-user/about/Dockerfile
            ABOUT_APP_IMAGE_TAG=${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AboutAppEcr}:latest
            docker build -t $ABOUT_APP_IMAGE_TAG /home/ec2-user/about
            docker push $ABOUT_APP_IMAGE_TAG
            
            mkdir -p /home/ec2-user/projects
            echo 'from flask import Flask
            app = Flask(__name__)
            @app.route("/projects")
            def hello_world():
              return "The projects page"' > /home/ec2-user/projects/app.py
            echo 'FROM python:3.8-alpine
            COPY . /app
            RUN pip3 install flask 
            WORKDIR /app
            CMD ["python3", "-m", "flask", "run", "--host=0.0.0.0"]' > /home/ec2-user/projects/Dockerfile
            PROJECTS_APP_IMAGE_TAG=${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectsAppEcr}:latest
            docker build -t $PROJECTS_APP_IMAGE_TAG /home/ec2-user/projects
            docker push $PROJECTS_APP_IMAGE_TAG
            
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionEc2 --region ${AWS::Region}
  BastionEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Bastion EC2 SSH Connection"
      GroupName: bastion-sg
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: bastion-sg
  BastionEc2IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
      RoleName: BastionEc2IamRole
  BastionEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: BastionEc2InstanceProfile
      Roles: 
        - !Ref BastionEc2IamRole
  BastionEc2ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref BastionEc2

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: wsi-ecs
      ClusterSettings:
        - Name: containerInsights
          Value: disabled
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  AboutAppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: about-container
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AboutAppEcr}:latest
          Essential: true
          PortMappings:
            - HostPort: 5000
              Protocol: tcp
              ContainerPort: 5000
          HealthCheck:
            Command: 
              - "CMD-SHELL"
              - "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:5000/about')\" || exit 1"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AboutAppTaskCloudWatchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      NetworkMode: awsvpc
      Cpu: 256
      Memory: 512
      Family: about-task-def
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
  AboutAppService:
    Type: AWS::ECS::Service
    DependsOn: 
      - Listener
      - AboutAppTaskCloudWatchLogGroup
    Properties:
      ServiceName: wsi-about-svc
      Cluster: !Ref EcsCluster
      LaunchType: FARGATE
      TaskDefinition: !Ref AboutAppTaskDefinition
      DesiredCount: 2
      LoadBalancers:
        - ContainerName: about-container
          ContainerPort: 5000
          TargetGroupArn: !Ref AboutAppTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref AboutAppSecurityGroup
          Subnets:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
      DeploymentController:
        Type: ECS
  AboutAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ECS About App
      GroupName: wsi-about-sg
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - FromPort: 5000
          ToPort: 5000
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref ApplicationLoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: wsi-about-sg
  AboutAppTaskCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/about-task-def
  ProjectsAppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: projects-container
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectsAppEcr}:latest
          Essential: true
          PortMappings:
            - HostPort: 5000
              Protocol: tcp
              ContainerPort: 5000
          HealthCheck:
            Command: 
              - "CMD-SHELL"
              - "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:5000/projects')\" || exit 1"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ProjectsAppTaskCloudWatchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      NetworkMode: awsvpc
      Cpu: 256
      Memory: 512
      Family: projects-task-def
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
  ProjectsAppService:
    Type: AWS::ECS::Service
    DependsOn: 
      - Listener
      - ProjectsAppTaskCloudWatchLogGroup
    Properties:
      ServiceName: wsi-projects-svc
      Cluster: !Ref EcsCluster
      LaunchType: FARGATE
      TaskDefinition: !Ref ProjectsAppTaskDefinition
      DesiredCount: 2
      LoadBalancers:
        - ContainerName: projects-container
          ContainerPort: 5000
          TargetGroupArn: !Ref ProjectsAppTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ProjectsAppSecurityGroup
          Subnets:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
      DeploymentController:
        Type: ECS
  ProjectsAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ECS Projects App
      GroupName: wsi-projects-sg
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - FromPort: 5000
          ToPort: 5000
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref ApplicationLoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: wsi-projects-sg
  ProjectsAppTaskCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/projects-task-def
  
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: wsi-alb
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref ApplicationLoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      Type: application
  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Application Load Balancer"
      GroupName: alb-sg
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: alb-sg
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: 
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: 403 Forbidden
            StatusCode: 403
      LoadBalancerArn: !GetAtt ApplicationLoadBalancer.LoadBalancerArn
      Port: 80
      Protocol: HTTP
  AboutAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 180
      HealthCheckPath: /about
      HealthCheckPort: 5000
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      IpAddressType: ipv4
      Name: wsi-about-tg
      Port: 5000
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 4
      VpcId: !Ref Vpc
  AboutAppListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref AboutAppTargetGroup
                Weight: 1
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /about
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: X-Custom-Header
            Values: 
              - !Ref AWS::StackId
      ListenerArn: !Ref Listener
      Priority: 1
  ProjectsAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 180
      HealthCheckPath: /projects
      HealthCheckPort: 5000
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      IpAddressType: ipv4
      Name: wsi-projects-tg
      Port: 5000
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 4
      VpcId: !Ref Vpc
  ProjectsAppListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ProjectsAppTargetGroup
                Weight: 1
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /projects
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: X-Custom-Header
            Values: 
              - !Ref AWS::StackId
      ListenerArn: !Ref Listener
      Priority: 2

  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior: 
          AllowedMethods: 
            - GET
            - HEAD
          CachedMethods: 
            - GET
            - HEAD
          CachePolicyId: !FindInMap [ResourceMap, CloudFrontManagedCachePolicy, CachingOptimized]
          TargetOriginId: AlbApi
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
          - AllowedMethods: 
              - GET
              - HEAD
            CachedMethods: 
              - GET
              - HEAD
            CachePolicyId: !FindInMap [ResourceMap, CloudFrontManagedCachePolicy, CachingOptimized]
            PathPattern: about
            TargetOriginId: AlbApi
            ViewerProtocolPolicy: redirect-to-https
          - AllowedMethods: 
              - GET
              - HEAD
            CachedMethods: 
              - GET
              - HEAD
            CachePolicyId: !FindInMap [ResourceMap, CloudFrontManagedCachePolicy, CachingDisabled]
            PathPattern: projects
            TargetOriginId: AlbApi
            ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: about
        Enabled: True
        HttpVersion: http1.1
        IPV6Enabled: False
        Origins: 
          - DomainName: !GetAtt ApplicationLoadBalancer.DNSName
            Id: AlbApi
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
            # https://docs.aws.amazon.com/ko_kr/AmazonCloudFront/latest/DeveloperGuide/restrict-access-to-load-balancer.html
            OriginCustomHeaders:
               - HeaderName: X-Custom-Header
                 HeaderValue: !Ref AWS::StackId
        PriceClass: PriceClass_All
        Staging: False
      Tags:
        - Key: Name
          Value: wsi-cloudfront