AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation Template"

Parameters:
#   KeyPair: 
#     Description: EC2 Key Pair
#     Type: AWS::EC2::KeyPair::KeyName
  UsS3Bucket:
    Type: String
    Description: Name of an Existing S3 bucket (us-wsi-static-XXXX)
    Default: us-wsi-static-XXXX

Mappings:
  RegionMap:
    us-east-1:
      AmazonLinux2023: ami-0b72821e2f351e396
    ap-northeast-2:
      AmazonLinux2023: ami-04ea5b2d3c8ceccf8
  ResourceMap:
    Vpc:
      Name : wsi-vpc
      CidrBlock: 10.1.0.0/16
    PublicSubnet:
      Name: wsi-public
    AppSubnet:
      Name: wsi-app
    DataSubnet:
      Name: wsi-data
    InternetGateway:
      Name: wsi-igw
    NatGateway:
      Name: wsi-natgw
    BastionEc2:
      Name: wsi-bastion
      InstanceType: t3.small
    CodePipeline:
      Name: wsi-pipeline
      Source: wsi-source
      Build: wsi-build
      DeployApplication: wsi-app
      DeploymentGroup: wsi-dg
    # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
    CloudFrontManagedCachePolicy:
      CachingOptimized: 658327ea-f89d-4fab-a63d-7e88639e58f6
      CachingDisabled: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
    Rds:
      MasterUsername: admin
      MasterUserPassword: worldskillsadminpassword # You Should Change This Password

Resources:
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub 
        - "key-${Id}"
        - Id: !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
  
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsHostnames: True
      CidrBlock: !FindInMap [ResourceMap, Vpc, CidrBlock]
      Tags: 
        - Key : Name
          Value : !FindInMap [ResourceMap, Vpc, Name]
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Select [2, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "a"]]
      VpcId: !Ref Vpc
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: !Select [3, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "b"]]
      VpcId: !Ref Vpc
  AppSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Select [0, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, AppSubnet, Name], "a"]]
      VpcId: !Ref Vpc
  AppSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: !Select [1, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, AppSubnet, Name], "b"]]
      VpcId: !Ref Vpc
  DataSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Select [4, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, DataSubnet, Name], "a"]]
      VpcId: !Ref Vpc
  DataSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: !Select [5, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, DataSubnet, Name], "b"]]
      VpcId: !Ref Vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !FindInMap [ResourceMap, InternetGateway, Name]
  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "rt"]]
      VpcId: !Ref Vpc
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetB
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable
  
  NatGatewayAElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, NatGateway, Name], "a"]]
  NatGatewayBElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, NatGateway, Name], "b"]]
  AppSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, AppSubnet, Name], "a", "rt"]]
      VpcId: !Ref Vpc
  AppSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AppSubnetARouteTable
      SubnetId: !Ref AppSubnetA
  AppSubnetARoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
      RouteTableId: !Ref AppSubnetARouteTable
  AppSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, AppSubnet, Name], "b", "rt"]]
      VpcId: !Ref Vpc
  AppSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AppSubnetBRouteTable
      SubnetId: !Ref AppSubnetB
  AppSubnetBRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
      RouteTableId: !Ref AppSubnetBRouteTable

  DataSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, DataSubnet, Name], "rt"]]
      VpcId: !Ref Vpc
  DataSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DataSubnetRouteTable
      SubnetId: !Ref DataSubnetA
  DataSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DataSubnetRouteTable
      SubnetId: !Ref DataSubnetB

  StressEcr:
    Type: AWS::ECR::Repository
    Properties:
      EmptyOnDelete: True
      RepositoryName: stress-ecr
      ImageScanningConfiguration:
        ScanOnPush: true
  ProductEcr:
    Type: AWS::ECR::Repository
    Properties:
      EmptyOnDelete: True
      RepositoryName: product-ecr
      ImageScanningConfiguration:
        ScanOnPush: true

  BastionEc2:
    Type: AWS::EC2::Instance
    DependsOn: 
      - StressEcr
      - ProductEcr
      - CodeCommit
    # CreationPolicy:
    #   ResourceSignal:
    #     Count: '1'                
    #     Timeout: PT5M
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref AWS::Region, AmazonLinux2023]
      InstanceType: !FindInMap [ResourceMap, BastionEc2, InstanceType]
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnetA
          GroupSet: 
            - !Ref BastionEc2SecurityGroup
      Tags: 
        - Key: Name
          Value: !FindInMap [ResourceMap, BastionEc2, Name]
      IamInstanceProfile: !Ref BastionEc2InstanceProfile
      UserData:
        # sudo tail -f /var/log/cloud-init-output.log
        # To Do : Revoke Security Group Ingress Rule 1Min Automatcally
        Fn::Base64: 
          !Sub 
            - |
              #!/bin/bash
              dnf update -y

              dnf install -y git
              git config --system credential.helper '!aws codecommit credential-helper $@'
              git config --system credential.UseHttpPath true
              git config --global --add safe.directory /home/ec2-user/stress
              mkdir /home/ec2-user/stress
              mkdir /home/ec2-user/product
              cd /home/ec2-user/stress
              git init
              git branch -m main
              git remote add origin ${CodeCommitUrl}
              cd /

              dnf install -y docker
              systemctl start docker
              systemctl enable docker
              usermod -aG docker ec2-user
              newgrp docker
              aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
              
              echo 'package main
              import (
                  "fmt"
                  "net/http"
              )
              func healthcheck(w http.ResponseWriter, req *http.Request) {
                  fmt.Fprint(w, "OK")
              }
              func main() {
                  http.HandleFunc("/healthcheck", healthcheck)
                  http.ListenAndServe(":8080", nil)
              }' > /home/ec2-user/stress/main.go
              sudo dnf install -y golang
              HOME=/home/ec2-user
              mkdir -p /home/ec2-user/.cache/go-build
              chown -R ec2-user:ec2-user /home/ec2-user/.cache
              CGO_ENABLED=0 GOOS=linux GOARCH=amd64 GOCACHE=/home/ec2-user/.cache/go-build go build -o /home/ec2-user/stress/stress-amd64 /home/ec2-user/stress/main.go
              cp /home/ec2-user/stress/stress-amd64 /home/ec2-user/product/product-amd64
              echo 'FROM alpine
              WORKDIR /app
              COPY stress-amd64 .
              RUN apk add --no-cache curl
              RUN apk --no-cache add ca-certificates && apk --no-cache upgrade
              RUN adduser -D appuser
              RUN chown appuser:appuser ./stress-amd64
              RUN chmod +x ./stress-amd64
              USER appuser
              EXPOSE 8080
              CMD ["./stress-amd64"]' > /home/ec2-user/stress/Dockerfile
              echo 'FROM alpine
              WORKDIR /app
              COPY product-amd64 .
              RUN apk add --no-cache curl
              RUN apk --no-cache add ca-certificates && apk --no-cache upgrade
              RUN adduser -D appuser
              RUN chown appuser:appuser ./product-amd64
              RUN chmod +x ./product-amd64
              USER appuser
              EXPOSE 8080
              CMD ["./product-amd64"]' > /home/ec2-user/product/Dockerfile
              STRESS_IMAGE_TAG=${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${StressEcr}:latest
              PRODUCT_IMAGE_TAG=${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProductEcr}:latest
              docker build -t $STRESS_IMAGE_TAG /home/ec2-user/stress
              docker push $STRESS_IMAGE_TAG 
              docker tag $STRESS_IMAGE_TAG $PRODUCT_IMAGE_TAG
              docker push $PRODUCT_IMAGE_TAG 
              rm /home/ec2-user/stress/main.go
              rm /home/ec2-user/stress/stress-amd64
              rm /home/ec2-user/stress/product-amd64

              echo '#!/bin/bash
              cd /home/ec2-user/stress
              git config --global --add safe.directory /home/ec2-user/stress
              git add .
              git commit -m "$1"
              git push -u origin main' > /home/ec2-user/push.sh
              chmod +x /home/ec2-user/push.sh

              echo '#!/bin/bash
              aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
              STRESS_IMAGE_TAG=${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${StressEcr}:latest
              docker build -t $STRESS_IMAGE_TAG /home/ec2-user/stress
              docker push $STRESS_IMAGE_TAG 
              PRODUCT_IMAGE_TAG=${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProductEcr}:latest
              docker build -t $PRODUCT_IMAGE_TAG /home/ec2-user/product
              docker push $PRODUCT_IMAGE_TAG' > /home/ec2-user/docker.sh
              chmod +x /home/ec2-user/docker.sh

              echo '#!/bin/bash
              NEW_PORT=4272
              sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak
              sudo sed -i "s/^#Port 22/Port $NEW_PORT/" /etc/ssh/sshd_config
              sudo sed -i "s/^Port 22/Port $NEW_PORT/" /etc/ssh/sshd_config
              sudo systemctl restart sshd' > /home/ec2-user/ssh.sh
              chmod +x /home/ec2-user/ssh.sh

              # echo '#!/bin/bash
              # mysql -h ${DbEndpoint} -P 3306 -u ${DbUsername} -p"${DbUserPassword}" << EOF
              # use dev;
              # create table product ( id VARCHAR(255) NOT NULL, name VARCHAR(255) NULL, PRIMARY KEY (id) );
              # EOF' > /home/ec2-user/db.sh
              # chmod +x /home/ec2-user/db.sh

              chown -R ec2-user:ec2-user /home/ec2-user
              
              # /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionEc2 --region ${AWS::Region}
            - CodeCommitUrl: !GetAtt CodeCommit.CloneUrlHttp
              CodeCommitName: !GetAtt CodeCommit.Name
              DbEndpoint: endpoint.com # !GetAtt RdsInstance.Endpoint.Address
              DbUsername: admin # !FindInMap [ResourceMap, Rds, MasterUsername]
              DbUserPassword: worldskillsadminpassword # !FindInMap [ResourceMap, Rds, MasterUserPassword]
  BastionEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Bastion EC2 SSH Connection"
      GroupName: bastion-sg
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 4272
          IpProtocol: tcp
          ToPort: 4272
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: bastion-sg
  BastionEc2IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      RoleName: BastionEc2IamRole
  BastionEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: BastionEc2InstanceProfile
      Roles: 
        - !Ref BastionEc2IamRole

  CodeCommit:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !FindInMap [ResourceMap, CodePipeline, Source]
  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts: 
        Type: CODEPIPELINE
      Environment: 
        ComputeType: BUILD_GENERAL1_MEDIUM
        Type: LINUX_CONTAINER
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
      Name: !FindInMap [ResourceMap, CodePipeline, Build]
      ServiceRole: !Ref CodeBuildIamRole
      Source: 
        BuildSpec: !Sub |
          version: 0.2
          env:
            variables:
              AWS_DEFAULT_REGION: ${AWS::Region}
              AWS_ACCOUNT_ID: ${AWS::AccountId}
              IMAGE_REPO_NAME: ${StressEcr}
              LOG_GROUP: ${StressTaskCloudWatchLogGroup}
          phases:
            pre_build:
              commands:
                - ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
            build:
              commands:
                - IMAGE_VERSION="latest"
                - IMAGE_TAG=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_VERSION
                - docker build -t $IMAGE_TAG .
                - docker push $IMAGE_TAG
                - aws ecr start-image-scan --repository-name $IMAGE_REPO_NAME --image-id imageTag=$IMAGE_VERSION
                - aws ecr wait image-scan-complete --repository-name $IMAGE_REPO_NAME --image-id imageTag=$IMAGE_VERSION
                - aws ecr describe-image-scan-findings --repository-name $IMAGE_REPO_NAME --image-id imageTag=$IMAGE_VERSION > result.json
                - CRITICAL_COUNT=$(jq '.imageScanFindings.findingSeverityCounts.CRITICAL // 0' result.json)
                - HIGH_COUNT=$(jq '.imageScanFindings.findingSeverityCounts.HIGH // 0' result.json)
                - MEDIUM_COUNT=$(jq '.imageScanFindings.findingSeverityCounts.MEDIUM // 0' result.json)
                - LOW_COUNT=$(jq '.imageScanFindings.findingSeverityCounts.LOW // 0' result.json)
                - echo "LOW:$LOW_COUNT MEDIUM:$MEDIUM_COUNT HIGH:$HIGH_COUNT CRITICAL:$CRITICAL_COUNT"
                - if [ $CRITICAL_COUNT -gt 0 ] || [ $HIGH_COUNT -gt 0 ]; then echo "Critical or High Vulnerabilities Found"; exit 1; fi
            post_build:
              commands:
                - IMAGE_VERSION=$(echo $(aws ecr describe-images --repository-name $IMAGE_REPO_NAME --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]') | tr -d '"')
                - FAMILY="stress-taskdef"
                - EXECUTION_ROLE_ARN="arn:aws:iam::$AWS_ACCOUNT_ID:role/${EcsTaskExecutionRole}"
                - CONTAINER_NAME="stress-container"
                - CONTAINER_PORT="8080"
                - CONTAINER_IMAGE="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_VERSION"
                - |
                  echo "{
                    'family':'$FAMILY',
                    'executionRoleArn':'$EXECUTION_ROLE_ARN',
                    'networkMode':'awsvpc',
                    'cpu':'512',
                    'memory':'1024',
                    'containerDefinitions':[
                      {
                        'healthCheck':{
                          'command':[
                            'CMD-SHELL',
                            'curl -f http://localhost:8080/healthcheck || exit 1'
                          ],
                          'interval':10,
                          'timeout':5,
                          'retries':3,
                          'startPeriod':0
                        },
                        'logConfiguration':{
                          'logDriver':'awslogs',
                          'options':{
                            'awslogs-group': '$LOG_GROUP',
                            'awslogs-region':'$AWS_DEFAULT_REGION',
                            'awslogs-stream-prefix':'task'
                          }
                        },
                        'name':'$CONTAINER_NAME',
                        'image':'$CONTAINER_IMAGE',
                        'portMappings':[
                          {
                            'containerPort':$CONTAINER_PORT,
                            'hostPort':$CONTAINER_PORT,
                            'protocol':'tcp'
                          }
                        ]
                      }
                    ]
                  }" > taskdef.json
                - |
                  echo "version: 0.0
                  Resources:
                    - TargetService:
                        Type: AWS::ECS::Service
                        Properties:
                          TaskDefinition: <TASK_DEFINITION>
                          LoadBalancerInfo:
                            ContainerName: '$CONTAINER_NAME'
                            ContainerPort: $CONTAINER_PORT" > appspec.yaml
          artifacts:
            files:
              - taskdef.json
              - appspec.yaml
            discard-paths: yes
        Type: CODEPIPELINE
      TimeoutInMinutes: 15
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
  CodeBuildIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - ecr:GetLifecyclePolicy
                  - ecr:GetLifecyclePolicyPreview
                  - ecr:ListTagsForResource
                  - ecr:StartImageScan
                  - ecr:DescribeImageScanFindings
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                  - ecs:*
                  - iam:PassRole
                Resource: '*'
      RoleName: CodeBuildRole
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !FindInMap [ResourceMap, CodePipeline, DeployApplication]
      ComputePlatform: ECS
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn:
      - StressService
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      AutoRollbackConfiguration: 
        Enabled: True
        Events: 
          - DEPLOYMENT_FAILURE
          - DEPLOYMENT_STOP_ON_ALARM
      DeploymentGroupName: !FindInMap [ResourceMap, CodePipeline, DeploymentGroup]
      ServiceRoleArn: !GetAtt CodeDeployIamRole.Arn
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      DeploymentStyle:
        DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentType: BLUE_GREEN
      ECSServices:
        - ClusterName: !Ref EcsCluster
          ServiceName: !GetAtt StressService.Name
      LoadBalancerInfo: 
        TargetGroupPairInfoList:
          - ProdTrafficRoute:
              ListenerArns:
                - !GetAtt Listener.ListenerArn
            TargetGroups:
              - Name: !GetAtt StressTargetGroup1.TargetGroupName
              - Name: !GetAtt StressTargetGroup2.TargetGroupName
      BlueGreenDeploymentConfiguration:
        DeploymentReadyOption: 
          ActionOnTimeout: CONTINUE_DEPLOYMENT
        TerminateBlueInstancesOnDeploymentSuccess: 
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 0
  CodeDeployIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CodeDeployPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:CreateTaskSet
                  - ecs:UpdateServicePrimaryTaskSet
                  - ecs:DeleteTaskSet
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeListeners
                  - elasticloadbalancing:ModifyListener
                  - elasticloadbalancing:DescribeRules
                  - elasticloadbalancing:ModifyRule
                  - lambda:InvokeFunction
                  - cloudwatch:DescribeAlarms
                  - sns:Publish
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: '*'
                Condition:
                  StringLike:
                    "iam:PassedToService" : "ecs-tasks.amazonaws.com"
      RoleName: CodeDeployRole
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
      - StressEcr 
      - CodeDeployDeploymentGroup
    Properties:
      Name: !FindInMap [ResourceMap, CodePipeline, Name]
      PipelineType: V2
      ArtifactStore:
        Location: !Ref CodePipelineArtifactStoreS3Bucket
        Type: S3
      RoleArn: !GetAtt CodePipelineIamRole.Arn
      Stages: 
        - Name: SourceStage
          Actions: 
            - Name: SourceAction
              ActionTypeId: 
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                RepositoryName: !GetAtt CodeCommit.Name
                BranchName: main
                PollForSourceChanges: False
              OutputArtifacts:
                - Name: SourceOutput
        - Name: BuildStage
          Actions: 
            - Name: BuildAction
              ActionTypeId: 
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuild
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
        - Name: DeployStage
          Actions: 
            - Name: DeployAction
              ActionTypeId: 
                Category: Deploy
                Owner: AWS
                Provider: CodeDeployToECS
                Version: 1
              Configuration:
                ApplicationName: !FindInMap [ResourceMap, CodePipeline, DeployApplication]
                DeploymentGroupName: !FindInMap [ResourceMap, CodePipeline, DeploymentGroup]
                TaskDefinitionTemplateArtifact: BuildOutput
                TaskDefinitionTemplatePath: taskdef.json
                AppSpecTemplateArtifact: BuildOutput
                AppSpecTemplatePath: appspec.yaml
              InputArtifacts:
                - Name: BuildOutput
  CodePipelineArtifactStoreS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: RetainExceptOnCreate
  CodePipelineIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:StartPipelineExecution
                Resource:
                  - !Sub 
                      - "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"
                      - CodePipeline: !FindInMap [ResourceMap, CodePipeline, Name]
              - Effect: Allow
                Action:
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:UploadArchive
                  - codecommit:GetUploadArchiveStatus
                Resource:
                  - !GetAtt CodeCommit.Arn
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource:
                  - !GetAtt CodeBuild.Arn
              - Effect: Allow
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetDeployment
                Resource:
                  - !Sub 
                      - "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${CodeDeployApplication}/${CodeDeployDeploymentGroup}"
                      - CodeDeployApplication: !FindInMap [ResourceMap, CodePipeline, DeployApplication]
                        CodeDeployDeploymentGroup: !FindInMap [ResourceMap, CodePipeline, DeploymentGroup]
              - Effect: Allow
                Action:
                  - codedeploy:GetDeploymentConfig
                Resource:
                  - !Sub "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:CodeDeployDefault.ECSAllAtOnce"
              - Effect: Allow
                Action:
                  - codedeploy:RegisterApplicationRevision
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                Resource:
                  - !Sub 
                      - "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:application:${CodeDeployApplication}"
                      - CodeDeployApplication: !FindInMap [ResourceMap, CodePipeline, DeployApplication]
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecs:RegisterTaskDefinition
                Resource:
                  - !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/stress-taskdef:*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/*"
              - Effect: Allow
                Action:
                  - ecr:*
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${StressEcr}"
      RoleName: CodePipelineRole
  CloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: >-
        AWS CodeCommit 소스 리포지토리와 브랜치에서 변경이 발생하면 파이프라인을 자동으로 시작하는 Amazon
        CloudWatch Events 규칙입니다. 이 규칙을 삭제하면 해당 파이프라인에서 변경 사항이 감지되지 않습니다. 자세한 정보:
        http://docs.aws.amazon.com/codepipeline/latest/userguide/pipelines-about-starting.html
      EventBusName: default
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Sub 
              - "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommit}"
              - CodeCommit: !FindInMap [ResourceMap, CodePipeline, Source]
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - main
      Name: codepipeline-event-rule
      State: ENABLED
      Targets:
        - Id: codepipeline-target
          Arn: !Sub 
            - "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"
            - CodePipeline: !FindInMap [ResourceMap, CodePipeline, Name]
          RoleArn: !GetAtt CloudWatchEventRuleIamRole.Arn
  CloudWatchEventRuleIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudWatchEventRulePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:StartPipelineExecution
                Resource:
                  - !Sub 
                      - "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"
                      - CodePipeline: !FindInMap [ResourceMap, CodePipeline, Name]
      RoleName: CloudWatchEventRuleRole

  StressTaskCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /wsi/webapp/stress
  ProductTaskCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /wsi/webapp/product

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: wsi-ecs-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: disabled
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  StressTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: stress-container
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${StressEcr}:latest
          Essential: true
          PortMappings:
            - HostPort: 8080
              Protocol: tcp
              ContainerPort: 8080
          HealthCheck:
            Command: 
              - "CMD-SHELL"
              - "curl -f http://localhost:8080/healthcheck || exit 1"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref StressTaskCloudWatchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: task
          # Secrets:
          #   Name: dbinfo
          #   ValueFrom: !Ref SecretsManagerSecret
      NetworkMode: awsvpc
      Cpu: 512
      Memory: 1024
      Family: stress-taskdef
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
  StressService:
    Type: AWS::ECS::Service
    DependsOn: 
      - Listener
      - StressTaskCloudWatchLogGroup
    Properties:
      ServiceName: stress
      Cluster: !Ref EcsCluster
      LaunchType: FARGATE
      TaskDefinition: !Ref StressTaskDefinition
      DesiredCount: 2
      LoadBalancers:
        - ContainerName: stress-container
          ContainerPort: 8080
          TargetGroupArn: !Ref StressTargetGroup1
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref StressSecurityGroup
          Subnets:
            - !Ref AppSubnetA
            - !Ref AppSubnetB
      DeploymentController:
        Type: CODE_DEPLOY
  StressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ECS Stress App
      GroupName: stress-sg
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - FromPort: 8080
          ToPort: 8080
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref ApplicationLoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: stress-sg
  StressServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Join ['/', [service, !Ref EcsCluster, !GetAtt StressService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      # RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
  StressServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: CPUTargetTrackingScaling
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref StressServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
  ProductTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: product-container
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProductEcr}:latest
          Essential: true
          PortMappings:
            - HostPort: 8080
              Protocol: tcp
              ContainerPort: 8080
          HealthCheck:
            Command: 
              - "CMD-SHELL"
              - "curl -f http://localhost:8080/healthcheck || exit 1"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ProductTaskCloudWatchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: task
      NetworkMode: awsvpc
      Cpu: 512
      Memory: 1024
      Family: product-taskdef
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
  ProductService:
    Type: AWS::ECS::Service
    DependsOn: 
      - Listener
      - ProductTaskCloudWatchLogGroup
    Properties:
      ServiceName: product
      Cluster: !Ref EcsCluster
      LaunchType: FARGATE
      TaskDefinition: !Ref ProductTaskDefinition
      DesiredCount: 2
      LoadBalancers:
        - ContainerName: product-container
          ContainerPort: 8080
          TargetGroupArn: !Ref ProductTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ProductSecurityGroup
          Subnets:
            - !Ref AppSubnetA
            - !Ref AppSubnetB
      DeploymentController:
        Type: ECS
  ProductSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ECS Product App
      GroupName: product-sg
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - FromPort: 8080
          ToPort: 8080
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref ApplicationLoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: product-sg

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: wsi-alb
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref ApplicationLoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      Type: application
  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Application Load Balancer"
      GroupName: alb-sg
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: alb-sg
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: 
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: Contents Not Found
            StatusCode: 404
      LoadBalancerArn: !GetAtt ApplicationLoadBalancer.LoadBalancerArn
      Port: 80
      Protocol: HTTP
  StressTargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 180
      HealthCheckPath: /healthcheck
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      IpAddressType: ipv4
      Name: stress-tg1
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 4
      VpcId: !Ref Vpc
  StressTargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 180
      HealthCheckPath: /healthcheck
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      IpAddressType: ipv4
      Name: stress-tg2
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 4
      VpcId: !Ref Vpc
  StressListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref StressTargetGroup1
                Weight: 1
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /v1/stress
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: X-Custom-Header
            Values: 
              - !Ref AWS::StackId
      ListenerArn: !Ref Listener
      Priority: 1
  ProductTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 180
      HealthCheckPath: /healthcheck
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      IpAddressType: ipv4
      Name: product-tg
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 4
      VpcId: !Ref Vpc
  ProductListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ProductTargetGroup
                Weight: 1
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /v1/product
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: X-Custom-Header
            Values: 
              - !Ref AWS::StackId
      ListenerArn: !Ref Listener
      Priority: 2

  # Object Key Prefix : /static/
  # Create UsS3Bucket "us-wsi-static-XXXX" & Add BucketPolicy
  ApS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      # BucketEncryption: 
      #   ServerSideEncryptionConfiguration: 
      #     - BucketKeyEnabled: true
      #       ServerSideEncryptionByDefault: 
      #         KMSMasterKeyID: String
      #         SSEAlgorithm: aws:kms
      BucketName: !Sub
        - "ap-wsi-static-${Id}"
        - Id: !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
      # ReplicationConfiguration: 
      #   Role: String
      #   Rules: 
      #     - DeleteMarkerReplication: 
      #         Status: Disabled
      #       Destination: 
      #         AccessControlTranslation: 
      #           AccessControlTranslation
      #         Account: String
      #         Bucket: String
      #         EncryptionConfiguration: 
      #           EncryptionConfiguration
      #         Metrics: 
      #           Metrics
      #         ReplicationTime: 
      #           ReplicationTime
      #         StorageClass: String
      #       Filter: 
      #         And: 
      #           ReplicationRuleAndOperator
      #         Prefix: String
      #         TagFilter: 
      #           TagFilter
      #       Id: String
      #       Prefix: String
      #       Priority: Integer
      #       SourceSelectionCriteria: 
      #         SourceSelectionCriteria
      #       Status: Enabled
      VersioningConfiguration: 
        Status: Enabled
  ApS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ApS3Bucket
      PolicyDocument:
        Version: 2008-10-17
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${ApS3Bucket}/*'
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFront}"
  SourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub
        - "source-${Id}"
        - Id: !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]

  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior: 
          AllowedMethods: 
            - GET
            - HEAD
          CachedMethods: 
            - GET
            - HEAD
          CachePolicyId: !FindInMap [ResourceMap, CloudFrontManagedCachePolicy, CachingOptimized]
          TargetOriginId: OriginGroup
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
          - AllowedMethods: 
              - HEAD
              - DELETE
              - POST
              - GET
              - OPTIONS
              - PUT
              - PATCH
            CachedMethods: 
              - HEAD
              - GET
              - OPTIONS
            CachePolicyId: !FindInMap [ResourceMap, CloudFrontManagedCachePolicy, CachingDisabled]
            OriginRequestPolicyId: !Ref CloudFrontOriginRequestPolicy
            PathPattern: v1/*
            TargetOriginId: AlbApi
            ViewerProtocolPolicy: redirect-to-https
        # DefaultRootObject: index.html
        Enabled: True
        HttpVersion: http1.1
        IPV6Enabled: False
        Origins:
          - DomainName: 
              !Sub '${ApS3Bucket}.s3.ap-northeast-2.amazonaws.com'
            Id: ApS3Bucket
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            S3OriginConfig:
              OriginAccessIdentity: ''
          - DomainName: 
              !Sub '${UsS3Bucket}.s3.ap-northeast-2.amazonaws.com'
            Id: UsS3Bucket
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            S3OriginConfig:
              OriginAccessIdentity: ''
          - DomainName: !GetAtt ApplicationLoadBalancer.DNSName
            Id: AlbApi
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
            # https://docs.aws.amazon.com/ko_kr/AmazonCloudFront/latest/DeveloperGuide/restrict-access-to-load-balancer.html
            OriginCustomHeaders:
               - HeaderName: X-Custom-Header
                 HeaderValue: !Ref AWS::StackId
        OriginGroups:
          Items: 
            - Id: OriginGroup
              FailoverCriteria: 
                StatusCodes:
                  Items: [400, 403, 404, 416, 500, 502, 503, 504]
                  Quantity: 8
              Members: 
                Items: 
                  - OriginId: ApS3Bucket
                  - OriginId: UsS3Bucket
                Quantity: 2
          Quantity: 1
        PriceClass: PriceClass_All
        Staging: False
      Tags:
        - Key: Name
          Value: wsi-cdn
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig: 
        Name: CloudFrontOriginAccessControl
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  CloudFrontOriginRequestPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties:
      OriginRequestPolicyConfig: 
        CookiesConfig: 
          CookieBehavior: none
        HeadersConfig: 
          HeaderBehavior: none
        Name: CloudFrontOriginRequestPolicy
        QueryStringsConfig: 
          QueryStringBehavior: all

  # SecretsManagerSecret:
  #   Type: AWS::SecretsManager::Secret
  #   Properties:
  #     Name: dbsecret
  # SecretsManagerSecretTargetAttachment:
  #   Type: AWS::SecretsManager::SecretTargetAttachment
  #   Properties:
  #     SecretId: !Ref SecretsManagerSecret
  #     TargetId: !Ref RdsInstance
  #     TargetType: AWS::RDS::DBInstance

  # # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbinstance.html
  # RdsInstance:
  #   Type: AWS::RDS::DBInstance
  #   Properties:
  #     DBInstanceIdentifier: wsi-rds-instance
  #     DBName: dev
  #     DBInstanceClass: db.t3.medium
  #     Engine: mysql
  #     EngineVersion: 8.0.35
  #     MasterUsername: !FindInMap [ResourceMap, Rds, MasterUsername]
  #     MasterUserPassword: !FindInMap [ResourceMap, Rds, MasterUserPassword]
  #     NetworkType: IPV4
  #     Port: 3306
  #     StorageType: gp2
  #     AllocatedStorage: 100
  #     DBSubnetGroupName: !Ref RdsSubnetGroup
  #     VPCSecurityGroups: 
  #       - !Ref RdsSecurityGroup
  #     StorageEncrypted: true
  # RdsSubnetGroup:
  #   Type: AWS::RDS::DBSubnetGroup
  #   Properties:
  #     DBSubnetGroupDescription: DB Subnet Group for RDS Cluster
  #     DBSubnetGroupName: dbsubnetgroup
  #     SubnetIds: 
  #       - !Ref DataSubnetA
  #       - !Ref DataSubnetB
  # RdsSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: "Security Group for RDS Instance"
  #     GroupName: rds-sg
  #     SecurityGroupIngress: 
  #       - IpProtocol: tcp
  #         FromPort: 3306
  #         ToPort: 3306
  #         SourceSecurityGroupId: !Ref BastionEc2SecurityGroup
  #     VpcId: !Ref Vpc
  #     Tags:
  #       - Key: Name
  #         Value: rds-sg











