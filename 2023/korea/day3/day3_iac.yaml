AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation Template"

Mappings:
  RegionMap:
    us-east-1:
      AmazonLinux2023: ami-0b72821e2f351e396
    ap-northeast-2:
      AmazonLinux2023: ami-04ea5b2d3c8ceccf8
  ResourceMap:
    Vpc:
      Name : wsi-vpc
      CidrBlock: 10.1.0.0/16
    PublicSubnet:
      Name: wsi-public
    PrivateSubnet:
      Name: wsi-private
    InternetGateway:
      Name: wsi-igw
    NatGateway:
      Name: wsi-natgw
    BastionEc2:
      Name: wsi-bastion
      InstanceType: t3.small

Resources:
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub 
        - "key-${Id}"
        - Id: !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
  
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsHostnames: True
      CidrBlock: !FindInMap [ResourceMap, Vpc, CidrBlock]
      Tags: 
        - Key : Name
          Value : !FindInMap [ResourceMap, Vpc, Name]
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Select [2, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "a"]]
      VpcId: !Ref Vpc
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: !Select [3, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "b"]]
      VpcId: !Ref Vpc
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Select [0, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "a"]]
      VpcId: !Ref Vpc
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: !Select [1, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "b"]]
      VpcId: !Ref Vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !FindInMap [ResourceMap, InternetGateway, Name]
  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "rt"]]
      VpcId: !Ref Vpc
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetB
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable
  
  NatGatewayAElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, NatGateway, Name], "a"]]
  NatGatewayBElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, NatGateway, Name], "b"]]
  PrivateSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "a", "rt"]]
      VpcId: !Ref Vpc
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetARouteTable
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnetARoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
      RouteTableId: !Ref PrivateSubnetARouteTable
  PrivateSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "b", "rt"]]
      VpcId: !Ref Vpc
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetBRouteTable
      SubnetId: !Ref PrivateSubnetB
  PrivateSubnetBRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
      RouteTableId: !Ref PrivateSubnetBRouteTable

  Ecr:
    Type: AWS::ECR::Repository
    Properties:
      EmptyOnDelete: True
      RepositoryName: foo
      ImageScanningConfiguration:
        ScanOnPush: true

  BastionEc2:
    Type: AWS::EC2::Instance
    DependsOn: 
      - Ecr
    # CreationPolicy:
    #   ResourceSignal:
    #     Count: '1'                
    #     Timeout: PT5M
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref AWS::Region, AmazonLinux2023]
      InstanceType: !FindInMap [ResourceMap, BastionEc2, InstanceType]
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnetA
          GroupSet: 
            - !Ref BastionEc2SecurityGroup
      Tags: 
        - Key: Name
          Value: !FindInMap [ResourceMap, BastionEc2, Name]
      IamInstanceProfile: !Ref BastionEc2InstanceProfile
      UserData:
        # sudo tail -f /var/log/cloud-init-output.log
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime
            dnf update -y
            dnf install -y docker
            systemctl start docker
            systemctl enable docker
            usermod -aG docker ec2-user
            newgrp docker
            aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
            
            mkdir -p /home/ec2-user/container
            mkdir -p /home/ec2-user/container/src

            echo 'package main
            import (
              "fmt"
              "net/http"
              "os"
              "time"

              "github.com/gin-gonic/gin"
            )
            type RequestBody struct {
              Iterator int `json:"iterator" binding:"required"`
            }
            func main() {
              router := gin.New()
              logfile, _ := os.Create("log/app.log")
              router.Use(gin.LoggerWithConfig(gin.LoggerConfig{
                Formatter: func(param gin.LogFormatterParams) string {
                  return fmt.Sprintf("%s - [%s] \"%s %s %s %d %s \"%s\" %s\"\n",
                    param.ClientIP,
                    param.TimeStamp.Format(time.RFC3339),
                    param.Method,
                    param.Path,
                    param.Request.Proto,
                    param.StatusCode,
                    param.Latency,
                    param.Request.UserAgent(),
                    param.ErrorMessage,
                  )
                },
                Output: logfile,
              }))
              router.Use(gin.Recovery())
              router.GET("/healthcheck", healthcheck)
              v1 := router.Group("/v1")
              {
                v1.GET("/foo", getFoo)
              }
              server := &http.Server{
                Addr:         ":8080", // port
                Handler:      router,
                ReadTimeout:  10 * time.Second,
                WriteTimeout: 10 * time.Second,
              }
              server.ListenAndServe()
            }
            func healthcheck(c *gin.Context) {
              c.JSON(200, gin.H{
                "status": "ok.",
              })
            }
            func getFoo(c *gin.Context) {
              c.JSON(200, gin.H{
                "application": "foo",
              })
            }' > /home/ec2-user/container/src/main.go

            echo 'module local-packages
            go 1.18
            require github.com/gin-gonic/gin v1.9.1
            require (
              github.com/bytedance/sonic v1.9.1 // indirect
              github.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311 // indirect
              github.com/gabriel-vasile/mimetype v1.4.2 // indirect
              github.com/gin-contrib/sse v0.1.0 // indirect
              github.com/go-playground/locales v0.14.1 // indirect
              github.com/go-playground/universal-translator v0.18.1 // indirect
              github.com/go-playground/validator/v10 v10.14.0 // indirect
              github.com/goccy/go-json v0.10.2 // indirect
              github.com/json-iterator/go v1.1.12 // indirect
              github.com/klauspost/cpuid/v2 v2.2.4 // indirect
              github.com/leodido/go-urn v1.2.4 // indirect
              github.com/mattn/go-isatty v0.0.19 // indirect
              github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
              github.com/modern-go/reflect2 v1.0.2 // indirect
              github.com/pelletier/go-toml/v2 v2.0.8 // indirect
              github.com/twitchyliquid64/golang-asm v0.15.1 // indirect
              github.com/ugorji/go/codec v1.2.11 // indirect
              golang.org/x/arch v0.3.0 // indirect
              golang.org/x/crypto v0.9.0 // indirect
              golang.org/x/net v0.10.0 // indirect
              golang.org/x/sys v0.8.0 // indirect
              golang.org/x/text v0.9.0 // indirect
              google.golang.org/protobuf v1.30.0 // indirect
              gopkg.in/yaml.v3 v3.0.1 // indirect
            )' > /home/ec2-user/container/src/go.mod

            echo 'FROM golang:1.18 AS build
            WORKDIR /source
            COPY src/ ./
            RUN go mod tidy && go mod download && CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o ./main
            FROM ubuntu:22.10
            WORKDIR /app
            RUN apk --no-cache add ca-certificates && apk --no-cache upgrade
            COPY --from=build /source/main ./
            RUN chmod +x ./main
            RUN adduser -D appuser
            RUN chown appuser:appuser ./main
            USER appuser
            ENTRYPOINT ["./main"]' > /home/ec2-user/container/Dockerfile

            IMAGE_VERSION=$(LC_TIME=ko_KR.UTF-8 date +'%Y%m%d-%H%M%S')
            IMAGE_TAG=${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Ecr}:$IMAGE_VERSION
            docker build -t $IMAGE_TAG /home/ec2-user/container
            docker push $IMAGE_TAG

            echo '#!/bin/bash
            aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
            IMAGE_VERSION=$(LC_TIME=ko_KR.UTF-8 date +'%Y%m%d-%H%M%S')
            IMAGE_TAG=${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Ecr}:$IMAGE_VERSION
            docker build -t $IMAGE_TAG /home/ec2-user/container
            docker push $IMAGE_TAG' > /home/ec2-user/container/build.sh
            chmod +x /home/ec2-user/container/build.sh

            chown -R ec2-user:ec2-user /home/ec2-user/container
            
            # /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionEc2 --region ${AWS::Region}
  BastionEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Bastion EC2 SSH Connection"
      GroupName: bastion-sg
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: bastion-sg
  BastionEc2IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      RoleName: BastionEc2IamRole
  BastionEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: BastionEc2InstanceProfile
      Roles: 
        - !Ref BastionEc2IamRole

  IamUser:
    Type: AWS::IAM::User
    Properties:
      UserName: red-user
      LoginProfile: 
        Password: Reduserpassword!
        PasswordResetRequired: true
      Policies: 
        - PolicyName: iamUserPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - ec2:RunInstances
                Resource:
                  - arn:aws:ec2:*:*:instance/*
                Condition:
                  StringEquals:
                    aws:RequestTag/project: red
              - Effect: Allow
                Action: 
                  - ec2:RunInstances
                Resource:
                  - arn:aws:ec2:*:*:network-interface/*
                  - arn:aws:ec2:*:*:volume/*
                  - arn:aws:ec2:*:*:image/*
                  - arn:aws:ec2:*:*:security-group/*
                  - arn:aws:ec2:*:*:subnet/*
                  - arn:aws:ec2:*:*:key-pair/*
              - Effect: Allow
                Action:
                  - ec2:Describe*
                  - ec2:Get*
                  - ec2:CreateTags
                  - elasticloadbalancing:Describe*
                  - autoscaling:Describe*
                  - cloudwatch:Get*
                  - cloudwatch:ListMetrics
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:Describe*
                  - iam:ListInstanceProfiles
                  - iam:ChangePassword
                  - compute-optimizer:GetEnrollmentStatus
                Resource: "*"

# Parameters:
#   BucketName:
#     Type: String
#     Description: "The s3 bucket name, it should be unique in all accounts"

# Resources:
#   CMK:
#     Type: AWS::KMS::Key
#     Properties:
#       Enabled: false
#       EnableKeyRotation: true
#       KeyPolicy:
#         Version: 2012-10-17
#         Id: key-default-1
#         Statement:
#           - Sid: Enable IAM User Permissions
#             Effect: Allow
#             Principal:
#               AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
#             Action: "kms:*"
#             Resource: "*"
#       KeyUsage: ENCRYPT_DECRYPT
#       PendingWindowInDays: 7

#   CMKAlias:
#     Type: AWS::KMS::Alias
#     Properties:
#       AliasName: !Sub "alias/s3/${BucketName}"
#       TargetKeyId: !Ref CMK

#   Bucket:
#     Type: AWS::S3::Bucket
#     DeletionPolicy: Delete
#     UpdateReplacePolicy: Delete
#     Properties:
#       BucketName: !Ref BucketName
#       VersioningConfiguration:
#         Status: Enabled
#       OwnershipControls:
#         Rules:
#           - ObjectOwnership: BucketOwnerEnforced
#       BucketEncryption:
#         ServerSideEncryptionConfiguration:
#           - BucketKeyEnabled: true
#             ServerSideEncryptionByDefault:
#               SSEAlgorithm: aws:kms
#               KMSMasterKeyID: !Ref CMK
#       PublicAccessBlockConfiguration:
#         BlockPublicAcls: true
#         BlockPublicPolicy: true
#         IgnorePublicAcls: true
#         RestrictPublicBuckets: true
